generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         String      @id @default(cuid())
  email      String      @unique
  password   String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  active     UserStatus  @default(INACTIVE)
  name       String
  phone      String      @unique
  Dentist    Dentist[]
  Patient    Patient[]
  Secretary  Secretary[]  
  user_role  UserRole[]
  UserAddress UserAddress[]

  @@map("usuarios")
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String
  UserRole    UserRole[]

  @@map("permissoes")
}

model UserRole {
  userId String @default(cuid())
  roleId String @default(cuid())
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId], map: "usuarios_permissoes_roleId_fkey")
  @@map("usuarios_permissoes")
}

model Secretary {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "secretarias_userId_fkey")
  @@map("secretarias")
}

model Dentist {
  id               String             @id @default(cuid())
  userId           String
  cro              String             @unique
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  DentistProcedure DentistProcedure[]
  MedicalHistory   MedicalHistory[]

  @@index([userId], map: "dentistas_userId_fkey")
  @@map("dentistas")
}

model Procedure {
  id               String             @id @default(cuid())
  name             String             @unique
  price            Float              @default(0)
  DentistProcedure DentistProcedure[]

  @@map("procedimentos")
}

model DentistProcedure {
  dentistId     String
  procedureId   String
  scheduled_at  DateTime          @default(now())
  scheduled_for DateTime
  approved      ProcedureApproval @default(NOT_APPROVED)
  patientId     String
  dentist       Dentist           @relation(fields: [dentistId], references: [id], onDelete: Cascade)
  patient       Patient           @relation(fields: [patientId], references: [id], onDelete: Cascade)
  procedure     Procedure         @relation(fields: [procedureId], references: [id], onDelete: Cascade)

  @@id([dentistId, procedureId, patientId])
  @@index([procedureId], map: "dentistas_procedimentos_procedureId_fkey")
  @@index([patientId], map: "dentistas_procedimentos_patientId_fkey")
  @@map("dentistas_procedimentos")
}

model HealthInsurance {
  id                     String                   @id @default(cuid())
  name                   String
  code                   String                   @unique
  PatientHealthInsurance PatientHealthInsurance[]

  @@map("convenios")
}

model Patient {
  id                           String                   @id @default(cuid())
  birth_date                   DateTime
  health_insurance_card_number String?
  userId                       String
  cpf                          String                   @unique
  DentistProcedure             DentistProcedure[]
  MedicalHistory               MedicalHistory[]
  user                         User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  PatientHealthInsurance       PatientHealthInsurance[]
  Anamnese   Anamnese[]
  ExtraOralExam ExtraOralExam[]
  IntraOralExam IntraOralExam[]

  @@index([userId], map: "pacientes_userId_fkey")
  @@map("pacientes")
}

model PatientHealthInsurance {
  patientId         String
  healthInsuranceId String
  healthInsurance   HealthInsurance @relation(fields: [healthInsuranceId], references: [id], onDelete: Cascade)
  patient           Patient         @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@id([patientId, healthInsuranceId])
  @@index([healthInsuranceId], map: "pacientes_convenios_healthInsuranceId_fkey")
  @@map("pacientes_convenios")
}

model MedicalHistory {
  id          String   @id @default(cuid())
  description String
  created_at  DateTime @default(now())
  dentistId   String
  patientId   String
  updated_at  DateTime @updatedAt
  dentist     Dentist  @relation(fields: [dentistId], references: [id], onDelete: Cascade)
  patient     Patient  @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([dentistId], map: "historico_medico_dentistId_fkey")
  @@index([patientId], map: "historico_medico_patientId_fkey")
  @@map("historico_medico")
}

model Address {
  id          String @id @default(cuid())
  cep         String
  logradouro  String
  complemento String
  bairro      String
  cidade      String
  uf          String @db.VarChar(2)
  UserAddress UserAddress[]

  @@map("enderecos")
}

model UserAddress {
  userId    String
  addressId String
  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@id([userId, addressId])
  @@map("usuarios_enderecos")
}

model Anamnese {
  id                                               String  @id @default(cuid())
  patientId                                        String
  patient                                          Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  reasonForConsultation                            String  @map("motivo_da_consulta")
  isUnderMedicalTreatment                          Boolean @map("esta_dob_tratamento_medico")
  takeSomeMedicine                                 Boolean @map("toma_algum_medicamento")
  medicationsUsed                                  String  @map("toma_quais_medicamentos")
  familyHistoryOfIllnesses                         String  @map("historico_de_doencas_da_familia")
  everHadHypertensionHeartAttackOrOther            Boolean @map("ja_teve_hipertensao_infarto_ou_outros")
  everHadHypertensionHeartAttackOrOtherDescription String  @map("hipertensao_infarto_ou_outros_descricao")
  everHadRheumaticFever                            Boolean @map("ja_teve_febre_reumatica")
  everHadRheumaticFeverDescription                 String  @map("ja_teve_febre_reumatica_descricao")
  everHadCancer                                    Boolean @map("ja_teve_cancer")
  everHadCancerDescription                         String  @map("ja_teve_cancer_descricao")
  everHadDiabetes                                  Boolean @map("ja_teve_diabetes")
  everHadDiabetesDescription                       String  @map("ja_teve_diabetes_descricao")
  everHadClottingRelatedProblems                   Boolean @map("ja_teve_problemas_coagulacao")
  everHadClottingRelatedProblemsDescription        String  @map("ja_teve_problemas_coagulacao_descricao")
  everHadReactionToPenicillin                      Boolean @map("ja_teve_reacao_contra_penincilina")
  everHadReactionToPenicillinDescription           String  @map("ja_teve_reacao_contra_penincilina_descricao")
  everHadHepatitis                                 Boolean @map("ja_teve_hepatite")
  everHadHepatitisDescription                      String  @map("ja_teve_hepatite_descricao")
  haveBeenVaccinatedAgainstHepatitisB              Boolean @map("ja_foi_vacinado_contra_hepatite_b")
  anyLiverProblems                                 Boolean @map("algum_problema_hepatico")
  anyLiverProblemsDescription                      Boolean @map("algum_problema_hepatico_descricao")
  anyKidneyProblems                                Boolean @map("algum_problema_renal")
  anyKidneyProblemsDescription                     Boolean @map("algum_problema_renal_descricao")
  everHadReactionAgainstAnesthesia                 Boolean @map("ja_teve_reacao_com_anestesia")
  everHadReactionAgainstAnesthesiaDescription      Boolean @map("ja_teve_reacao_com_anestesia_descricao")
  isPregnant                                       Boolean @map("gestante")
  isPregnantDescription                            String  @map("gestanteDescricao")
  wasSmoker                                        Boolean @map("foi_fumante")
  wasSmokerDescription                             String  @map("foi_fumante_descricao")
  isSmoker                                         Boolean @map("is_fumante")
  isSmokerDescription                              String  @map("is_fumante_descricao")
  drinksAlchol                                     Boolean @map("bebe_alcool")
  drinksAlcholDescription                          String  @map("bebe_alcool_descricao")
  useDrugs                                         Boolean @map("usa_drogas")
  useDrugsDescription                              String  @map("usa_drogas_descricao")

  @@map("anamnese")
}

model ExtraOralExam {
  id                 String @id @default(cuid())
  patientId          String
  patient            Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  skin               String @map("pele")
  facialSimmetry     String @map("simetria_facial")
  earJawArticulation String @map("articulacao_temporomandibular")
  linfonodos         String @map("linfonodos")

  @@map("exame_fisico_extra_oral")
}

model IntraOralExam {
  id String @id @default(cuid())
  patientId            String
  patient              Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  lips                 String @map("labios")
  tongue               String @map("lingual")
  buccalFloor          String @map("assoalho_bucal")
  hardPalate           String @map("palato_duro")
  softPalate           String @map("palato_mole")
  mucosaJugal          String @map("mucosa_jugal")
  mucosaAleolar        String @map("mucosa_aleolar")
  orofaringeRetromolar String @map("orofaringe_retromolar")
  injuryDescription    String @map("descricao_da_lesao")

  @@map("exame_fisico_intra_oral")
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

enum ProcedureApproval {
  APPROVED
  NOT_APPROVED
}
